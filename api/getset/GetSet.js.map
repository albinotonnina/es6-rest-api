{"version":3,"sources":["../../src/getset/GetSet.js"],"names":["mongodb","require","ObjectID","Routes","dbCollection","req","res","context","layout","exampleString","template","__dirname","set","status","render","reason","message","code","console","log","json","db","collection","find","toArray","err","docs","handleError","findOne","_id","params","id","doc","newContact","body","createDate","Date","firstName","lastName","insertOne","ops"],"mappings":";;;;;;;;;;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,WAAWF,QAAQE,QAAvB;;IAEaC,M,WAAAA,M;AACT,sBAAc;AAAA;;AACV,aAAKC,YAAL,GAAoB,cAApB;AACH;;;;6BAEIC,G,EAAKC,G,EAAK;AACX,gBAAMC,UAAU,EAAhB;AACAA,oBAAQC,MAAR,GAAiB,IAAjB;AACAD,oBAAQE,aAAR,GAAwB,OAAxB;AACA,gBAAMC,WAAWC,YAAY,eAA7B;;AAEAL,gBAAIM,GAAJ,CAAQ,cAAR,EAAwB,2BAAxB;;AAEA,mBAAON,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,MAAhB,CAAuBJ,QAAvB,EAAiCH,OAAjC,CAAP;AACH;;;oCAEWD,G,EAAKS,M,EAAQC,O,EAASC,I,EAAM;AACpCC,oBAAQC,GAAR,CAAY,YAAYJ,MAAxB;AACA,mBAAOT,IAAIO,MAAJ,CAAWI,QAAQ,GAAnB,EAAwBG,IAAxB,CAA6B,EAAC,SAASJ,OAAV,EAA7B,CAAP;AACH;;;mCAEUX,G,EAAKC,G,EAAK;AACjB,gBAAMe,KAAKhB,IAAIgB,EAAf;AACA,gBAAMC,aAAaD,GAAGC,UAAH,CAAc,KAAKlB,YAAnB,CAAnB;;AAEAkB,uBAAWC,IAAX,CAAgB,EAAhB,EAAoBC,OAApB,CAA4B,UAAUC,GAAV,EAAeC,IAAf,EAAqB;;AAE7C,oBAAID,GAAJ,EAAS;AACL,2BAAO,KAAKE,WAAL,CAAiBrB,GAAjB,EAAsBmB,IAAIT,OAA1B,EAAmC,yBAAnC,CAAP;AACH;;AAED,uBAAOV,IAAIO,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBM,IAArB,CAAP;AACH,aAPD;AAQH;;;kCAESrB,G,EAAKC,G,EAAK;AAChB,gBAAMe,KAAKhB,IAAIgB,EAAf;AACA,gBAAMC,aAAaD,GAAGC,UAAH,CAAc,KAAKlB,YAAnB,CAAnB;;AAEAkB,uBAAWM,OAAX,CAAmB,EAACC,KAAK,IAAI3B,QAAJ,CAAaG,IAAIyB,MAAJ,CAAWC,EAAxB,CAAN,EAAnB,EAAuD,UAAUN,GAAV,EAAeO,GAAf,EAAoB;;AAEvE,oBAAIP,GAAJ,EAAS;AACL,2BAAO,KAAKE,WAAL,CAAiBrB,GAAjB,EAAsBmB,IAAIT,OAA1B,EAAmC,uBAAnC,CAAP;AACH;;AAED,uBAAOV,IAAIO,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBY,GAArB,CAAP;AACH,aAPD;AAQH;;;kCAES3B,G,EAAKC,G,EAAK;;AAEhB,gBAAMe,KAAKhB,IAAIgB,EAAf;AACA,gBAAMC,aAAaD,GAAGC,UAAH,CAAc,KAAKlB,YAAnB,CAAnB;;AAEA,gBAAM6B,aAAa5B,IAAI6B,IAAvB;AACAD,uBAAWE,UAAX,GAAwB,IAAIC,IAAJ,EAAxB;;AAEA,gBAAI,EAAE/B,IAAI6B,IAAJ,CAASG,SAAT,IAAsBhC,IAAI6B,IAAJ,CAASI,QAAjC,CAAJ,EAAgD;AAC5C,uBAAO,KAAKX,WAAL,CAAiBrB,GAAjB,EAAsB,oBAAtB,EAA4C,oCAA5C,EAAkF,GAAlF,CAAP;AACH;;AAEDgB,uBAAWiB,SAAX,CAAqBN,UAArB,EAAiC,UAAUR,GAAV,EAAeO,GAAf,EAAoB;;AAEjD,oBAAIP,GAAJ,EAAS;AACL,2BAAO,KAAKE,WAAL,CAAiBrB,GAAjB,EAAsBmB,IAAIT,OAA1B,EAAmC,+BAAnC,CAAP;AACH;;AAED,uBAAOV,IAAIO,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBY,IAAIQ,GAAJ,CAAQ,CAAR,CAArB,CAAP;AAEH,aARD;AAUH","file":"GetSet.js","sourcesContent":["var mongodb = require('mongodb');\nvar ObjectID = mongodb.ObjectID;\n\nexport class Routes {\n    constructor() {\n        this.dbCollection = 'mycollection';\n    }\n\n    root(req, res) {\n        const context = {};\n        context.layout = null;\n        context.exampleString = 'sdfds';\n        const template = __dirname + '/views/getset';\n\n        res.set('Content-Type', 'application/vnd.uber+json');\n\n        return res.status(200).render(template, context);\n    }\n\n    handleError(res, reason, message, code) {\n        console.log('ERROR: ' + reason);\n        return res.status(code || 500).json({'error': message});\n    }\n\n    getRecords(req, res) {\n        const db = req.db;\n        const collection = db.collection(this.dbCollection);\n\n        collection.find({}).toArray(function (err, docs) {\n\n            if (err) {\n                return this.handleError(res, err.message, 'Failed to get contacts.');\n            }\n\n            return res.status(200).json(docs);\n        });\n    }\n\n    getRecord(req, res) {\n        const db = req.db;\n        const collection = db.collection(this.dbCollection);\n\n        collection.findOne({_id: new ObjectID(req.params.id)}, function (err, doc) {\n\n            if (err) {\n                return this.handleError(res, err.message, 'Failed to get contact');\n            }\n\n            return res.status(200).json(doc);\n        });\n    }\n\n    setRecord(req, res) {\n\n        const db = req.db;\n        const collection = db.collection(this.dbCollection);\n\n        const newContact = req.body;\n        newContact.createDate = new Date();\n\n        if (!(req.body.firstName || req.body.lastName)) {\n            return this.handleError(res, 'Invalid user input', 'Must provide a first or last name.', 400);\n        }\n\n        collection.insertOne(newContact, function (err, doc) {\n\n            if (err) {\n                return this.handleError(res, err.message, 'Failed to create new contact.');\n            }\n\n            return res.status(201).json(doc.ops[0]);\n\n        });\n\n    }\n}\n"]}