{"version":3,"sources":["../../../src/api/getset/index.js"],"names":["config","db","collection","router","Router","mergeParams","handleError","res","reason","message","code","console","log","status","json","get","req","find","toArray","err","docs","findOne","_id","params","id","doc","post","newContact","body","createDate","Date","firstName","lastName","insertOne","ops"],"mappings":";;;;;;AAAA;;;;AACA;;;;kBAEe,gBAAkB;AAAA,QAAhBA,MAAgB,QAAhBA,MAAgB;AAAA,QAARC,EAAQ,QAARA,EAAQ;;;AAE7B,QAAMC,aAAaD,GAAGC,UAAH,CAAc,cAAd,CAAnB;AACA,QAAMC,SAAS,kBAAQC,MAAR,CAAe,EAACC,aAAa,IAAd,EAAf,CAAf;;AAEA,QAAIC,cAAc,SAAdA,WAAc,CAAUC,GAAV,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;AACpDC,gBAAQC,GAAR,CAAY,QAAZ,EAAsBJ,MAAtB;AACAD,YAAIM,MAAJ,CAAWH,QAAQ,GAAnB,EAAwBI,IAAxB,CAA6B,EAAC,SAASL,OAAV,EAA7B;AACH,KAHD;;AAKAN,WAAOY,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMT,GAAN,EAAc;AAC1BL,mBAAWe,IAAX,CAAgB,EAAhB,EAAoBC,OAApB,CAA4B,UAACC,GAAD,EAAMC,IAAN,EAAe;AACvC,gBAAID,GAAJ,EAAS;AACLb,4BAAYC,GAAZ,EAAiBY,IAAIV,OAArB,EAA8B,yBAA9B;AACH,aAFD,MAEO;AACHF,oBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,IAArB;AACH;AACJ,SAND;AAOH,KARD;;AAUAjB,WAAOY,GAAP,CAAW,MAAX,EAAmB,UAACC,GAAD,EAAMT,GAAN,EAAc;AAC7BL,mBAAWmB,OAAX,CAAmB,EAACC,KAAK,sBAAaN,IAAIO,MAAJ,CAAWC,EAAxB,CAAN,EAAnB,EAAuD,UAAUL,GAAV,EAAeM,GAAf,EAAoB;AACvE,gBAAIN,GAAJ,EAAS;AACLb,4BAAYC,GAAZ,EAAiBY,IAAIV,OAArB,EAA8B,uBAA9B;AACH,aAFD,MAEO;AACHF,oBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,GAArB;AACH;AACJ,SAND;AAOH,KARD;;AAUAtB,WAAOuB,IAAP,CAAY,GAAZ,EAAiB,UAACV,GAAD,EAAMT,GAAN,EAAc;AAC3B,YAAMoB,aAAaX,IAAIY,IAAvB;AACAD,mBAAWE,UAAX,GAAwB,IAAIC,IAAJ,EAAxB;;AAEA,YAAI,EAAEd,IAAIY,IAAJ,CAASG,SAAT,IAAsBf,IAAIY,IAAJ,CAASI,QAAjC,CAAJ,EAAgD;AAC5C,mBAAO1B,YAAYC,GAAZ,EAAiB,oBAAjB,EAAuC,oCAAvC,EAA6E,GAA7E,CAAP;AACH;;AAEDL,mBAAW+B,SAAX,CAAqBN,UAArB,EAAiC,UAAUR,GAAV,EAAeM,GAAf,EAAoB;AACjD,gBAAIN,GAAJ,EAAS;AACLb,4BAAYC,GAAZ,EAAiBY,IAAIV,OAArB,EAA8B,+BAA9B;AACH,aAFD,MAEO;AACHF,oBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,IAAIS,GAAJ,CAAQ,CAAR,CAArB;AACH;AACJ,SAND;AAOH,KAfD;;AAiBA,WAAO/B,MAAP;AAEH,C","file":"index.js","sourcesContent":["import express from 'express';\nimport {ObjectID} from 'mongodb';\n\nexport default ({config, db}) => {\n\n    const collection = db.collection('mycollection');\n    const router = express.Router({mergeParams: true});\n\n    let handleError = function (res, reason, message, code) {\n        console.log('ERROR:', reason);\n        res.status(code || 500).json({'error': message});\n    };\n\n    router.get('/', (req, res) => {\n        collection.find({}).toArray((err, docs) => {\n            if (err) {\n                handleError(res, err.message, 'Failed to get contacts.');\n            } else {\n                res.status(200).json(docs);\n            }\n        });\n    });\n\n    router.get('/:id', (req, res) => {\n        collection.findOne({_id: new ObjectID(req.params.id)}, function (err, doc) {\n            if (err) {\n                handleError(res, err.message, 'Failed to get contact');\n            } else {\n                res.status(200).json(doc);\n            }\n        });\n    });\n\n    router.post('/', (req, res) => {\n        const newContact = req.body;\n        newContact.createDate = new Date();\n\n        if (!(req.body.firstName || req.body.lastName)) {\n            return handleError(res, 'Invalid user input', 'Must provide a first or last name.', 400);\n        }\n\n        collection.insertOne(newContact, function (err, doc) {\n            if (err) {\n                handleError(res, err.message, 'Failed to create new contact.');\n            } else {\n                res.status(201).json(doc.ops[0]);\n            }\n        });\n    });\n\n    return router;\n\n}\n\n"]}